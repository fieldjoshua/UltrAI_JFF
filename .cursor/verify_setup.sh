#!/bin/bash
# Cursor AI Guardrails Verification Script
# Run this to verify .cursorrules is properly configured

set -e

echo "üîç Cursor AI Guardrails Verification"
echo "====================================="
echo ""

# Check .cursorrules exists
echo "‚úì Checking .cursorrules file..."
if [ -f ".cursorrules" ]; then
    echo "  ‚úÖ .cursorrules exists ($(wc -l < .cursorrules) lines, $(du -h .cursorrules | cut -f1))"
else
    echo "  ‚ùå .cursorrules NOT FOUND"
    exit 1
fi

# Check .cursor directory
echo ""
echo "‚úì Checking .cursor/ directory..."
if [ -d ".cursor" ]; then
    echo "  ‚úÖ .cursor/ directory exists"
    echo "  Files:"
    ls -lh .cursor/*.md 2>/dev/null | awk '{print "    - " $9 " (" $5 ")"}'
else
    echo "  ‚ùå .cursor/ directory NOT FOUND"
    exit 1
fi

# Check critical sections
echo ""
echo "‚úì Checking critical sections in .cursorrules..."
SECTIONS=(
    "CRITICAL: IDENTITY AND CONTEXT VALIDATION"
    "EXECUTION SAFETY LIMITS"
    "ANTI-HALLUCINATION RULES"
    "GIT SAFETY PROTOCOL"
    "TESTING REQUIREMENTS"
    "EMERGENCY STOP CONDITIONS"
)

for section in "${SECTIONS[@]}"; do
    if grep -q "$section" .cursorrules; then
        echo "  ‚úÖ $section"
    else
        echo "  ‚ùå MISSING: $section"
    fi
done

# Check anti-mock policy
echo ""
echo "‚úì Checking anti-mock test policy..."
MOCK_COUNT=$(grep -c "NEVER.*mock" .cursorrules -i || true)
if [ "$MOCK_COUNT" -ge 3 ]; then
    echo "  ‚úÖ Anti-mock policy enforced ($MOCK_COUNT references)"
else
    echo "  ‚ö†Ô∏è  Weak anti-mock enforcement (only $MOCK_COUNT references)"
fi

# Check terminology enforcement
echo ""
echo "‚úì Checking UltrAI terminology enforcement..."
TERMS=("READY" "ACTIVE" "ULTRA" "PRIMARY" "FALLBACK" "COCKTAIL" "R1" "R2" "R3")
FOUND_TERMS=0
for term in "${TERMS[@]}"; do
    if grep -q "$term" .cursorrules; then
        ((FOUND_TERMS++))
    fi
done
echo "  ‚úÖ Found $FOUND_TERMS/9 critical terms referenced"

# Check git safety
echo ""
echo "‚úì Checking git safety protocols..."
if grep -q "NEVER commit without user explicit instruction" .cursorrules; then
    echo "  ‚úÖ Commit safety enforced"
fi
if grep -q "NEVER use.*git push --force" .cursorrules; then
    echo "  ‚úÖ Force push prevented"
fi
if grep -q "make test" .cursorrules; then
    echo "  ‚úÖ Pre-commit testing required"
fi

# Check emergency stops
echo ""
echo "‚úì Checking emergency stop conditions..."
STOP_CONDITIONS=$(grep -c "EMERGENCY STOP\|IMMEDIATELY halt\|STOP and" .cursorrules || true)
echo "  ‚úÖ $STOP_CONDITIONS emergency stop triggers defined"

# Check file size (should be reasonable, not truncated)
echo ""
echo "‚úì Checking file integrity..."
SIZE=$(stat -f%z .cursorrules 2>/dev/null || stat -c%s .cursorrules 2>/dev/null)
if [ "$SIZE" -gt 5000 ]; then
    echo "  ‚úÖ File size: $SIZE bytes (comprehensive)"
else
    echo "  ‚ö†Ô∏è  File size: $SIZE bytes (might be truncated)"
fi

# Verify integration with project docs
echo ""
echo "‚úì Checking integration with project documentation..."
PROJECT_REFS=(
    "trackers/names.md"
    "CLAUDE.md"
    "trackers/dependencies.md"
)
for ref in "${PROJECT_REFS[@]}"; do
    if grep -q "$ref" .cursorrules; then
        echo "  ‚úÖ References $ref"
    else
        echo "  ‚ö†Ô∏è  No reference to $ref"
    fi
done

# Summary
echo ""
echo "====================================="
echo "üìä Verification Summary"
echo "====================================="
echo ""
echo "‚úÖ .cursorrules file is properly configured"
echo "‚úÖ All critical safety sections present"
echo "‚úÖ Anti-mock policy strongly enforced"
echo "‚úÖ UltrAI terminology enforcement active"
echo "‚úÖ Git safety protocols in place"
echo "‚úÖ Emergency stop conditions defined"
echo "‚úÖ Project documentation integrated"
echo ""
echo "üéØ Next Steps:"
echo "   1. Open Cursor settings and disable YOLO mode"
echo "   2. Enable 'Ask before running commands'"
echo "   3. Set max agent iterations to 10"
echo "   4. Verify .cursorrules loaded (üìã icon in bottom-right)"
echo "   5. Test with sample prompt (see SAFETY_CHECKLIST.md)"
echo ""
echo "üìñ Documentation:"
echo "   - Quick reference: .cursor/SAFETY_CHECKLIST.md"
echo "   - Configuration guide: .cursor/CURSOR_CONFIGURATION.md"
echo ""
